[{"content":"Introduction In the first post of this series, we saw how to install and get around VIM. In this post, we will start configuring VIM to our preferences via plugins. All plugins and configurations for VIM are defined in a file called vimrc. The file is by default located in your home directory as ~/.vimrc. This is the file which we edit below.\nThere are many plugin managers like vim-plug, vundle or minpac. I recommend using minpac for its simplicity to set up.\nSetting up minpac Following the README file from the official github repository, we can install minpac via\ngit clone https://github.com/k-takata/minpac.git ~/.vim/pack/minpac/opt/minpac We should then add the following to the the vimrc file:\npackadd minpac call minpac#init() call minpac#add(\u0026#39;k-takata/minpac\u0026#39;, {\u0026#39;type\u0026#39;: \u0026#39;opt\u0026#39;}) \u0026#34; Add some additional plugins below call minpac#add(\u0026#39;davidhalter/jedi-vim\u0026#39;) command! PackUpdate call PackInit() | call minpac#update() command! PackClean call PackInit() | call minpac#clean() command! PackStatus packadd minpac | call minpac#status() After saving the file with :write, we can resource the configuration file with :source % and then call :Packpdate. This will install of the desired plugins if they have not been installed yet and update existing ones. :PackClean can be used to remove plugins removed from the vimrc file.\nDefining some custom commands I like to reset the leader key to the space bar. This can be achieved with:\nlet mapleader=\u0026#34;\\\u0026lt;Space\u0026gt;\u0026#34; Other custom commands can be defined with the nnoremap command. Below is an example for how to invoke the fuzzy finder with Ctrl-f and Ctrl-p:\n\u0026#34; Map Ctrl-f and Ctrl-p to FZF nnoremap \u0026lt;C-f\u0026gt; :\u0026lt;C-u\u0026gt;Files\u0026lt;CR\u0026gt; nnoremap \u0026lt;C-p\u0026gt; :\u0026lt;C-u\u0026gt;GFiles\u0026lt;CR\u0026gt; Changing the colorscheme Colorscheme can be installed in the same way as plugins. I really like the onedark theme, and it can be added via:\ncall minpac#add(\u0026#39;joshdick/onedark.vim\u0026#39;, {\u0026#39;name\u0026#39;: \u0026#39;onedark\u0026#39;}) packadd! onedark colorscheme onedark The colorscheme should be changed to the onedark theme now :)\n","permalink":"https://pwuethri.github.io/posts/220531_add_plugins_to_vim/","summary":"Introduction In the first post of this series, we saw how to install and get around VIM. In this post, we will start configuring VIM to our preferences via plugins. All plugins and configurations for VIM are defined in a file called vimrc. The file is by default located in your home directory as ~/.vimrc. This is the file which we edit below.\nThere are many plugin managers like vim-plug, vundle or minpac.","title":"Setting up a Coding Environment - Part 2: Customizing VIM with plugins and tuning settings"},{"content":"Introduction I don\u0026rsquo;t find myself using the Caps lock key that much and would rather have it mapped to Control for convienience. While this is really straight-forward on a Mac, it requires a non-obvious solution on Windows. Luckily, SO came to the rescue.\nThe Recipe We need to run Powershell as an administrator and type the following commands:\n$hexified = \u0026#34;00,00,00,00,00,00,00,00,02,00,00,00,1d,00,3a,00,00,00,00,00\u0026#34;.Split(\u0026#39;,\u0026#39;) | % { \u0026#34;0x$_\u0026#34;}; $kbLayout = \u0026#39;HKLM:\\System\\CurrentControlSet\\Control\\Keyboard Layout\u0026#39;; New-ItemProperty -Path $kbLayout -Name \u0026#34;Scancode Map\u0026#34; -PropertyType Binary -Value ([byte[]]$hexified); After reboot, the caps lock key will be mapped to Ctrl\nResources  Original SO post with the recipe: https://superuser.com/questions/949385/map-capslock-to-control-in-windows-10  ","permalink":"https://pwuethri.github.io/posts/220518_remapping_caps/","summary":"Introduction I don\u0026rsquo;t find myself using the Caps lock key that much and would rather have it mapped to Control for convienience. While this is really straight-forward on a Mac, it requires a non-obvious solution on Windows. Luckily, SO came to the rescue.\nThe Recipe We need to run Powershell as an administrator and type the following commands:\n$hexified = \u0026#34;00,00,00,00,00,00,00,00,02,00,00,00,1d,00,3a,00,00,00,00,00\u0026#34;.Split(\u0026#39;,\u0026#39;) | % { \u0026#34;0x$_\u0026#34;}; $kbLayout = \u0026#39;HKLM:\\System\\CurrentControlSet\\Control\\Keyboard Layout\u0026#39;; New-ItemProperty -Path $kbLayout -Name \u0026#34;Scancode Map\u0026#34; -PropertyType Binary -Value ([byte[]]$hexified); After reboot, the caps lock key will be mapped to Ctrl","title":"Remapping the Caps lock key to Ctrl"},{"content":"Introduction Windows Subsystem Linux (WSL) is an amazing feature that allows users to run full Linux distros directly from Windows. It removes the need to run a virtual machine or restart and select an OS during dualbooting.\nIn this post, we will see how easy it is to install WSL on Windows and get an Ubuntu distribution up and running.\nInstalling WSL Installing WSL can be done by running Powershell (as an administrator) and run the command\nwsl --install This will actually install Ubuntu by default. To change this, we could use the command\nwsl --install -d \u0026lt;Distribution Name\u0026gt; The list of available distributions can be seen with wsl --list --online (equivalent to wsl -l -o!).\nThere are two versions of WSL, and this will set WSL2 as the default. We can use the command wsl -l -v in powershell or Windows command prompt to check which version is currently being used. If we would like to switch, wsl --set-default-version \u0026lt;1/2\u0026gt; will do the trick.\nSetting up Linux Running the Ubuntu app will open a window which will prompt us to enter an username and password. This will become the default user whenever Ubuntu is launched.\nOne nifty trick is to link the Windows home folder to Linux\u0026rsquo;s home folder via a symbolic link ln -s /mnt/c/Users/\u0026lt;username\u0026gt; ~/winhome. This will make the access to the Windows files easy via the command cd ~/winhome.\nPackages can be updated and upgraded as usual via sudo apt update \u0026amp;\u0026amp; sudo apt upgrade. As an example, git can be installed via sudo apt-get update followed by sudo apt-get install git. The version can be checked with git --version.\nSetting up Windows Terminal Windows Terminal is a great app to access and customize applications which have a command line interface. The Terminal can be downloaded directly from the Microsoft Store.\nResources  WSL documentation: https://docs.microsoft.com/en-us/windows/wsl/ Link to Windows files: https://unix.stackexchange.com/questions/658031/how-do-i-make-a-shortcut-to-a-path-using-two-tilde-characters-or-similar  ","permalink":"https://pwuethri.github.io/posts/220517_installing_wsl/","summary":"Introduction Windows Subsystem Linux (WSL) is an amazing feature that allows users to run full Linux distros directly from Windows. It removes the need to run a virtual machine or restart and select an OS during dualbooting.\nIn this post, we will see how easy it is to install WSL on Windows and get an Ubuntu distribution up and running.\nInstalling WSL Installing WSL can be done by running Powershell (as an administrator) and run the command","title":"How to install WSL on Windows"},{"content":"Welcome to my personal blog, my name is Pierre Wüthrich.\nI am a Machine Learning Engineer / Data Scientist passionate about topics ranging from AI to Quantum Computing.\nThis webpage hosted on GitHub is my personal notes repository where I will occasionally make posts with interesting tidbits of coding/consulting I learned on my professional journey.\nContact Information Please feel free to contact me to discuss AI in general or just to say hello :-) You can find my SNS info on the landing page!\nCredit  Powered by Hugo with PaperMode theme Deployed by GitHub Pages Inspired by jdhao\u0026rsquo;s digital space and The Coding Notes  ","permalink":"https://pwuethri.github.io/about/","summary":"Welcome to my personal blog, my name is Pierre Wüthrich.\nI am a Machine Learning Engineer / Data Scientist passionate about topics ranging from AI to Quantum Computing.\nThis webpage hosted on GitHub is my personal notes repository where I will occasionally make posts with interesting tidbits of coding/consulting I learned on my professional journey.\nContact Information Please feel free to contact me to discuss AI in general or just to say hello :-) You can find my SNS info on the landing page!","title":"Hello there!"}]